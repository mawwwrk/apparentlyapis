/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/public/characters": {
    /** Fetches lists of comic characters with optional filters. See notes on individual parameters below. */
    get: operations["getCreatorCollection"];
  };
  "/v1/public/characters/{characterId}": {
    /** This method fetches a single character resource.  It is the canonical URI for any character resource provided by the API. */
    get: operations["getCharacterIndividual"];
  };
  "/v1/public/characters/{characterId}/comics": {
    /** Fetches lists of comics containing a specific character, with optional filters. See notes on individual parameters below. */
    get: operations["getComicsCharacterCollection"];
  };
  "/v1/public/characters/{characterId}/events": {
    /** Fetches lists of events in which a specific character appears, with optional filters. See notes on individual parameters below. */
    get: operations["getCharacterEventsCollection"];
  };
  "/v1/public/characters/{characterId}/series": {
    /** Fetches lists of comic series in which a specific character appears, with optional filters. See notes on individual parameters below. */
    get: operations["getCharacterSeriesCollection"];
  };
  "/v1/public/characters/{characterId}/stories": {
    /** Fetches lists of comic stories  featuring a specific character with optional filters. See notes on individual parameters below. */
    get: operations["getCharacterStoryCollection"];
  };
  "/v1/public/comics": {
    /** Fetches lists of comics with optional filters. See notes on individual parameters below. */
    get: operations["getComicsCollection"];
  };
  "/v1/public/comics/{comicId}": {
    /** This method fetches a single comic resource.  It is the canonical URI for any comic resource provided by the API. */
    get: operations["getComicIndividual"];
  };
  "/v1/public/comics/{comicId}/characters": {
    /** Fetches lists of characters which appear in a specific comic with optional filters. See notes on individual parameters below. */
    get: operations["getComicCharacterCollection"];
  };
  "/v1/public/comics/{comicId}/creators": {
    /** Fetches lists of comic creators whose work appears in a specific comic, with optional filters. See notes on individual parameters below. */
    get: operations["getCreatorCollection"];
  };
  "/v1/public/comics/{comicId}/events": {
    /** Fetches lists of events in which a specific comic appears, with optional filters. See notes on individual parameters below. */
    get: operations["getIssueEventsCollection"];
  };
  "/v1/public/comics/{comicId}/stories": {
    /** Fetches lists of comic stories in a specific comic issue, with optional filters. See notes on individual parameters below. */
    get: operations["getComicStoryCollection"];
  };
  "/v1/public/creators": {
    /** Fetches lists of comic creators with optional filters. See notes on individual parameters below. */
    get: operations["getCreatorCollection"];
  };
  "/v1/public/creators/{creatorId}": {
    /** This method fetches a single creator resource.  It is the canonical URI for any creator resource provided by the API. */
    get: operations["getCreatorIndividual"];
  };
  "/v1/public/creators/{creatorId}/comics": {
    /** Fetches lists of comics in which the work of a specific creator appears, with optional filters. See notes on individual parameters below. */
    get: operations["getComicsCollection"];
  };
  "/v1/public/creators/{creatorId}/events": {
    /** Fetches lists of events featuring the work of a specific creator with optional filters. See notes on individual parameters below. */
    get: operations["getCreatorEventsCollection"];
  };
  "/v1/public/creators/{creatorId}/series": {
    /** Fetches lists of comic series in which a specific creator's work appears, with optional filters. See notes on individual parameters below. */
    get: operations["getCreatorSeriesCollection"];
  };
  "/v1/public/creators/{creatorId}/stories": {
    /** Fetches lists of comic stories by a specific creator with optional filters. See notes on individual parameters below. */
    get: operations["getCreatorStoryCollection"];
  };
  "/v1/public/events": {
    /** Fetches lists of events with optional filters. See notes on individual parameters below. */
    get: operations["getEventsCollection"];
  };
  "/v1/public/events/{eventId}": {
    /** This method fetches a single event resource.  It is the canonical URI for any event resource provided by the API. */
    get: operations["getEventIndividual"];
  };
  "/v1/public/events/{eventId}/characters": {
    /** Fetches lists of characters which appear in a specific event, with optional filters. See notes on individual parameters below. */
    get: operations["getEventCharacterCollection"];
  };
  "/v1/public/events/{eventId}/comics": {
    /** Fetches lists of comics which take place during a specific event, with optional filters. See notes on individual parameters below. */
    get: operations["getComicsCollection"];
  };
  "/v1/public/events/{eventId}/creators": {
    /** Fetches lists of comic creators whose work appears in a specific event, with optional filters. See notes on individual parameters below. */
    get: operations["getCreatorCollection"];
  };
  "/v1/public/events/{eventId}/series": {
    /** Fetches lists of comic series in which a specific event takes place, with optional filters. See notes on individual parameters below. */
    get: operations["getEventSeriesCollection"];
  };
  "/v1/public/events/{eventId}/stories": {
    /** Fetches lists of comic stories from a specific event, with optional filters. See notes on individual parameters below. */
    get: operations["getEventStoryCollection"];
  };
  "/v1/public/series": {
    /** Fetches lists of comic series with optional filters. See notes on individual parameters below. */
    get: operations["getSeriesCollection"];
  };
  "/v1/public/series/{seriesId}": {
    /** This method fetches a single comic series resource.  It is the canonical URI for any comic series resource provided by the API. */
    get: operations["getSeriesIndividual"];
  };
  "/v1/public/series/{seriesId}/characters": {
    /** Fetches lists of characters which appear in specific series, with optional filters. See notes on individual parameters below. */
    get: operations["getSeriesCharacterWrapper"];
  };
  "/v1/public/series/{seriesId}/comics": {
    /** Fetches lists of comics which are published as part of a specific series, with optional filters. See notes on individual parameters below. */
    get: operations["getComicsCollection"];
  };
  "/v1/public/series/{seriesId}/creators": {
    /** Fetches lists of comic creators whose work appears in a specific series, with optional filters. See notes on individual parameters below. */
    get: operations["getCreatorCollection"];
  };
  "/v1/public/series/{seriesId}/events": {
    /** Fetches lists of events which occur in a specific series, with optional filters. See notes on individual parameters below. */
    get: operations["getEventsCollection"];
  };
  "/v1/public/series/{seriesId}/stories": {
    /** Fetches lists of comic stories from a specific series with optional filters. See notes on individual parameters below. */
    get: operations["getSeriesStoryCollection"];
  };
  "/v1/public/stories": {
    /** Fetches lists of comic stories with optional filters. See notes on individual parameters below. */
    get: operations["getStoryCollection"];
  };
  "/v1/public/stories/{storyId}": {
    /** This method fetches a single comic story resource.  It is the canonical URI for any comic story resource provided by the API. */
    get: operations["getStoryIndividual"];
  };
  "/v1/public/stories/{storyId}/characters": {
    /** Fetches lists of comic characters appearing in a single story, with optional filters. See notes on individual parameters below. */
    get: operations["getCreatorCollection"];
  };
  "/v1/public/stories/{storyId}/comics": {
    /** Fetches lists of comics in which a specific story appears, with optional filters. See notes on individual parameters below. */
    get: operations["getComicsCollection"];
  };
  "/v1/public/stories/{storyId}/creators": {
    /** Fetches lists of comic creators whose work appears in a specific story, with optional filters. See notes on individual parameters below. */
    get: operations["getCreatorCollection"];
  };
  "/v1/public/stories/{storyId}/events": {
    /** Fetches lists of events in which a specific story appears, with optional filters. See notes on individual parameters below. */
    get: operations["getEventsCollection"];
  };
  "/v1/public/stories/{storyId}/series": {
    /** Fetches lists of comic series in which the specified story takes place. See notes on individual parameters below. */
    get: operations["getStorySeriesCollection"];
  };
}

export interface definitions {
  Character: {
    /** @description A resource list containing comics which feature this character. */
    comics?: definitions["ComicList"];
    /** @description A short bio or description of the character. */
    description?: string;
    /** @description A resource list of events in which this character appears. */
    events?: definitions["EventList"];
    /**
     * Format: int32
     * @description The unique ID of the character resource.
     */
    id?: number;
    /**
     * Format: date
     * @description The date the resource was most recently modified.
     */
    modified?: string;
    /** @description The name of the character. */
    name?: string;
    /** @description The canonical URL identifier for this resource. */
    resourceURI?: string;
    /** @description A resource list of series in which this character appears. */
    series?: definitions["SeriesList"];
    /** @description A resource list of stories in which this character appears. */
    stories?: definitions["StoryList"];
    /** @description The representative image for this character. */
    thumbnail?: definitions["Image"];
    /** @description A set of public web site URLs for the resource. */
    urls?: definitions["Url"][];
  };
  CharacterDataContainer: {
    /**
     * Format: int32
     * @description The total number of results returned by this call.
     */
    count?: number;
    /**
     * Format: int32
     * @description The requested result limit.
     */
    limit?: number;
    /**
     * Format: int32
     * @description The requested offset (number of skipped results) of the call.
     */
    offset?: number;
    /** @description The list of characters returned by the call. */
    results?: definitions["Character"][];
    /**
     * Format: int32
     * @description The total number of resources available given the current filter set.
     */
    total?: number;
  };
  CharacterDataWrapper: {
    /** @description An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
    attributionHTML?: string;
    /** @description The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
    attributionText?: string;
    /**
     * Format: int32
     * @description The HTTP status code of the returned result.
     */
    code?: number;
    /** @description The copyright notice for the returned result. */
    copyright?: string;
    /** @description The results returned by the call. */
    data?: definitions["CharacterDataContainer"];
    /** @description A digest value of the content returned by the call. */
    etag?: string;
    /** @description A string description of the call status. */
    status?: string;
  };
  CharacterList: {
    /**
     * Format: int32
     * @description The number of total available characters in this list. Will always be greater than or equal to the "returned" value.
     */
    available?: number;
    /** @description The path to the full list of characters in this collection. */
    collectionURI?: string;
    /** @description The list of returned characters in this collection. */
    items?: definitions["CharacterSummary"][];
    /**
     * Format: int32
     * @description The number of characters returned in this collection (up to 20).
     */
    returned?: number;
  };
  CharacterSummary: {
    /** @description The full name of the character. */
    name?: string;
    /** @description The path to the individual character resource. */
    resourceURI?: string;
    /** @description The role of the creator in the parent entity. */
    role?: string;
  };
  Comic: {
    /** @description A resource list containing the characters which appear in this comic. */
    characters?: definitions["CharacterList"];
    /** @description A list of issues collected in this comic (will generally be empty for periodical formats such as "comic" or "magazine"). */
    collectedIssues?: definitions["ComicSummary"][];
    /** @description A list of collections which include this comic (will generally be empty if the comic's format is a collection). */
    collections?: definitions["ComicSummary"][];
    /** @description A resource list containing the creators associated with this comic. */
    creators?: definitions["CreatorList"];
    /** @description A list of key dates for this comic. */
    dates?: definitions["ComicDate"][];
    /** @description The preferred description of the comic. */
    description?: string;
    /** @description The Diamond code for the comic. */
    diamondCode?: string;
    /**
     * Format: int32
     * @description The ID of the digital comic representation of this comic. Will be 0 if the comic is not available digitally.
     */
    digitalId?: number;
    /** @description The EAN barcode for the comic. */
    ean?: string;
    /** @description A resource list containing the events in which this comic appears. */
    events?: definitions["EventList"];
    /** @description The publication format of the comic e.g. comic, hardcover, trade paperback. */
    format?: string;
    /**
     * Format: int32
     * @description The unique ID of the comic resource.
     */
    id?: number;
    /** @description A list of promotional images associated with this comic. */
    images?: definitions["Image"][];
    /** @description The ISBN for the comic (generally only populated for collection formats). */
    isbn?: string;
    /** @description The ISSN barcode for the comic. */
    issn?: string;
    /**
     * Format: double
     * @description The number of the issue in the series (will generally be 0 for collection formats).
     */
    issueNumber?: number;
    /**
     * Format: date
     * @description The date the resource was most recently modified.
     */
    modified?: string;
    /**
     * Format: int32
     * @description The number of story pages in the comic.
     */
    pageCount?: number;
    /** @description A list of prices for this comic. */
    prices?: definitions["ComicPrice"][];
    /** @description The canonical URL identifier for this resource. */
    resourceURI?: string;
    /** @description A summary representation of the series to which this comic belongs. */
    series?: definitions["SeriesSummary"];
    /** @description A resource list containing the stories which appear in this comic. */
    stories?: definitions["StoryList"];
    /** @description A set of descriptive text blurbs for the comic. */
    textObjects?: definitions["TextObject"][];
    /** @description The representative image for this comic. */
    thumbnail?: definitions["Image"];
    /** @description The canonical title of the comic. */
    title?: string;
    /** @description The UPC barcode number for the comic (generally only populated for periodical formats). */
    upc?: string;
    /** @description A set of public web site URLs for the resource. */
    urls?: definitions["Url"][];
    /** @description If the issue is a variant (e.g. an alternate cover, second printing, or director’s cut), a text description of the variant. */
    variantDescription?: string;
    /** @description A list of variant issues for this comic (includes the "original" issue if the current issue is a variant). */
    variants?: definitions["ComicSummary"][];
  };
  ComicDataContainer: {
    /**
     * Format: int32
     * @description The total number of results returned by this call.
     */
    count?: number;
    /**
     * Format: int32
     * @description The requested result limit.
     */
    limit?: number;
    /**
     * Format: int32
     * @description The requested offset (number of skipped results) of the call.
     */
    offset?: number;
    /** @description The list of comics returned by the call */
    results?: definitions["Comic"][];
    /**
     * Format: int32
     * @description The total number of resources available given the current filter set.
     */
    total?: number;
  };
  ComicDataWrapper: {
    /** @description An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
    attributionHTML?: string;
    /** @description The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
    attributionText?: string;
    /**
     * Format: int32
     * @description The HTTP status code of the returned result.
     */
    code?: number;
    /** @description The copyright notice for the returned result. */
    copyright?: string;
    /** @description The results returned by the call. */
    data?: definitions["ComicDataContainer"];
    /** @description A digest value of the content returned by the call. */
    etag?: string;
    /** @description A string description of the call status. */
    status?: string;
  };
  ComicDate: {
    /**
     * Format: date
     * @description The date.
     */
    date?: string;
    /** @description A description of the date (e.g. onsale date, FOC date). */
    type?: string;
  };
  ComicList: {
    /**
     * Format: int32
     * @description The number of total available issues in this list. Will always be greater than or equal to the "returned" value.
     */
    available?: number;
    /** @description The path to the full list of issues in this collection. */
    collectionURI?: string;
    /** @description The list of returned issues in this collection. */
    items?: definitions["ComicSummary"][];
    /**
     * Format: int32
     * @description The number of issues returned in this collection (up to 20).
     */
    returned?: number;
  };
  ComicPrice: {
    /**
     * Format: float
     * @description The price (all prices in USD).
     */
    price?: number;
    /** @description A description of the price (e.g. print price, digital price). */
    type?: string;
  };
  ComicSummary: {
    /** @description The canonical name of the comic. */
    name?: string;
    /** @description The path to the individual comic resource. */
    resourceURI?: string;
  };
  Creator: {
    /** @description A resource list containing the comics which feature work by this creator. */
    comics?: definitions["ComicList"];
    /** @description A resource list containing the events which feature work by this creator. */
    events?: definitions["EventList"];
    /** @description The first name of the creator. */
    firstName?: string;
    /** @description The full name of the creator (a space-separated concatenation of the above four fields). */
    fullName?: string;
    /**
     * Format: int32
     * @description The unique ID of the creator resource.
     */
    id?: number;
    /** @description The last name of the creator. */
    lastName?: string;
    /** @description The middle name of the creator. */
    middleName?: string;
    /**
     * Format: date
     * @description The date the resource was most recently modified.
     */
    modified?: string;
    /** @description The canonical URL identifier for this resource. */
    resourceURI?: string;
    /** @description A resource list containing the series which feature work by this creator. */
    series?: definitions["SeriesList"];
    /** @description A resource list containing the stories which feature work by this creator. */
    stories?: definitions["StoryList"];
    /** @description The suffix or honorific for the creator. */
    suffix?: string;
    /** @description The representative image for this creator. */
    thumbnail?: definitions["Image"];
    /** @description A set of public web site URLs for the resource. */
    urls?: definitions["Url"][];
  };
  CreatorDataContainer: {
    /**
     * Format: int32
     * @description The total number of results returned by this call.
     */
    count?: number;
    /**
     * Format: int32
     * @description The requested result limit.
     */
    limit?: number;
    /**
     * Format: int32
     * @description The requested offset (number of skipped results) of the call.
     */
    offset?: number;
    /** @description The list of creators returned by the call. */
    results?: definitions["Creator"][];
    /**
     * Format: int32
     * @description The total number of resources available given the current filter set.
     */
    total?: number;
  };
  CreatorDataWrapper: {
    /** @description An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
    attributionHTML?: string;
    /** @description The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
    attributionText?: string;
    /**
     * Format: int32
     * @description The HTTP status code of the returned result.
     */
    code?: number;
    /** @description The copyright notice for the returned result. */
    copyright?: string;
    /** @description The results returned by the call. */
    data?: definitions["CreatorDataContainer"];
    /** @description A digest value of the content returned by the call. */
    etag?: string;
    /** @description A string description of the call status. */
    status?: string;
  };
  CreatorList: {
    /**
     * Format: int32
     * @description The number of total available creators in this list. Will always be greater than or equal to the "returned" value.
     */
    available?: number;
    /** @description The path to the full list of creators in this collection. */
    collectionURI?: string;
    /** @description The list of returned creators in this collection. */
    items?: definitions["CreatorSummary"][];
    /**
     * Format: int32
     * @description The number of creators returned in this collection (up to 20).
     */
    returned?: number;
  };
  CreatorSummary: {
    /** @description The full name of the creator. */
    name?: string;
    /** @description The path to the individual creator resource. */
    resourceURI?: string;
    /** @description The role of the creator in the parent entity. */
    role?: string;
  };
  Event: {
    /** @description A resource list containing the characters which appear in this event. */
    characters?: definitions["CharacterList"];
    /** @description A resource list containing the comics in this event. */
    comics?: definitions["ComicList"];
    /** @description A resource list containing creators whose work appears in this event. */
    creators?: definitions["CreatorList"];
    /** @description A description of the event. */
    description?: string;
    /**
     * Format: date
     * @description The date of publication of the last issue in this event.
     */
    end?: string;
    /**
     * Format: int32
     * @description The unique ID of the event resource.
     */
    id?: number;
    /**
     * Format: date
     * @description The date the resource was most recently modified.
     */
    modified?: string;
    /** @description A summary representation of the event which follows this event. */
    next?: definitions["EventSummary"];
    /** @description A summary representation of the event which preceded this event. */
    previous?: definitions["EventSummary"];
    /** @description The canonical URL identifier for this resource. */
    resourceURI?: string;
    /** @description A resource list containing the series in this event. */
    series?: definitions["SeriesList"];
    /**
     * Format: date
     * @description The date of publication of the first issue in this event.
     */
    start?: string;
    /** @description A resource list containing the stories in this event. */
    stories?: definitions["StoryList"];
    /** @description The representative image for this event. */
    thumbnail?: definitions["Image"];
    /** @description The title of the event. */
    title?: string;
    /** @description A set of public web site URLs for the event. */
    urls?: definitions["Url"][];
  };
  EventDataContainer: {
    /**
     * Format: int32
     * @description The total number of results returned by this call.
     */
    count?: number;
    /**
     * Format: int32
     * @description The requested result limit.
     */
    limit?: number;
    /**
     * Format: int32
     * @description The requested offset (number of skipped results) of the call.
     */
    offset?: number;
    /** @description The list of events returned by the call */
    results?: definitions["Event"][];
    /**
     * Format: int32
     * @description The total number of resources available given the current filter set.
     */
    total?: number;
  };
  EventDataWrapper: {
    /** @description An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
    attributionHTML?: string;
    /** @description The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
    attributionText?: string;
    /**
     * Format: int32
     * @description The HTTP status code of the returned result.
     */
    code?: number;
    /** @description The copyright notice for the returned result. */
    copyright?: string;
    /** @description The results returned by the call. */
    data?: definitions["EventDataContainer"];
    /** @description A digest value of the content returned by the call. */
    etag?: string;
    /** @description A string description of the call status. */
    status?: string;
  };
  EventList: {
    /**
     * Format: int32
     * @description The number of total available events in this list. Will always be greater than or equal to the "returned" value.
     */
    available?: number;
    /** @description The path to the full list of events in this collection. */
    collectionURI?: string;
    /** @description The list of returned events in this collection. */
    items?: definitions["EventSummary"][];
    /**
     * Format: int32
     * @description The number of events returned in this collection (up to 20).
     */
    returned?: number;
  };
  EventSummary: {
    /** @description The name of the event. */
    name?: string;
    /** @description The path to the individual event resource. */
    resourceURI?: string;
  };
  Image: {
    /** @description The file extension for the image. */
    extension?: string;
    /** @description The directory path of to the image. */
    path?: string;
  };
  Series: {
    /** @description A resource list containing characters which appear in comics in this series. */
    characters?: definitions["CharacterList"];
    /** @description A resource list containing comics in this series. */
    comics?: definitions["ComicList"];
    /** @description A resource list of creators whose work appears in comics in this series. */
    creators?: definitions["CreatorList"];
    /** @description A description of the series. */
    description?: string;
    /**
     * Format: int32
     * @description The last year of publication for the series (conventionally, 2099 for ongoing series) .
     */
    endYear?: number;
    /** @description A resource list containing events which take place in comics in this series. */
    events?: definitions["EventList"];
    /**
     * Format: int32
     * @description The unique ID of the series resource.
     */
    id?: number;
    /**
     * Format: date
     * @description The date the resource was most recently modified.
     */
    modified?: string;
    /** @description A summary representation of the series which follows this series. */
    next?: definitions["SeriesSummary"];
    /** @description A summary representation of the series which preceded this series. */
    previous?: definitions["SeriesSummary"];
    /** @description The age-appropriateness rating for the series. */
    rating?: string;
    /** @description The canonical URL identifier for this resource. */
    resourceURI?: string;
    /**
     * Format: int32
     * @description The first year of publication for the series.
     */
    startYear?: number;
    /** @description A resource list containing stories which occur in comics in this series. */
    stories?: definitions["StoryList"];
    /** @description The representative image for this series. */
    thumbnail?: definitions["Image"];
    /** @description The canonical title of the series. */
    title?: string;
    /** @description A set of public web site URLs for the resource. */
    urls?: definitions["Url"][];
  };
  SeriesDataContainer: {
    /**
     * Format: int32
     * @description The total number of results returned by this call.
     */
    count?: number;
    /**
     * Format: int32
     * @description The requested result limit.
     */
    limit?: number;
    /**
     * Format: int32
     * @description The requested offset (number of skipped results) of the call.
     */
    offset?: number;
    /** @description The list of series returned by the call */
    results?: definitions["Series"][];
    /**
     * Format: int32
     * @description The total number of resources available given the current filter set.
     */
    total?: number;
  };
  SeriesDataWrapper: {
    /** @description An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
    attributionHTML?: string;
    /** @description The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
    attributionText?: string;
    /**
     * Format: int32
     * @description The HTTP status code of the returned result.
     */
    code?: number;
    /** @description The copyright notice for the returned result. */
    copyright?: string;
    /** @description The results returned by the call. */
    data?: definitions["SeriesDataContainer"];
    /** @description A digest value of the content returned by the call. */
    etag?: string;
    /** @description A string description of the call status. */
    status?: string;
  };
  SeriesList: {
    /**
     * Format: int32
     * @description The number of total available series in this list. Will always be greater than or equal to the "returned" value.
     */
    available?: number;
    /** @description The path to the full list of series in this collection. */
    collectionURI?: string;
    /** @description The list of returned series in this collection. */
    items?: definitions["SeriesSummary"][];
    /**
     * Format: int32
     * @description The number of series returned in this collection (up to 20).
     */
    returned?: number;
  };
  SeriesSummary: {
    /** @description The canonical name of the series. */
    name?: string;
    /** @description The path to the individual series resource. */
    resourceURI?: string;
  };
  Story: {
    /** @description A resource list of characters which appear in this story. */
    characters?: definitions["CharacterList"];
    /** @description A resource list containing comics in which this story takes place. */
    comics?: definitions["ComicList"];
    /** @description A resource list of creators who worked on this story. */
    creators?: definitions["CreatorList"];
    /** @description A short description of the story. */
    description?: string;
    /** @description A resource list of the events in which this story appears. */
    events?: definitions["EventList"];
    /**
     * Format: int32
     * @description The unique ID of the story resource.
     */
    id?: number;
    /**
     * Format: date
     * @description The date the resource was most recently modified.
     */
    modified?: string;
    /** @description A summary representation of the issue in which this story was originally published. */
    originalissue?: definitions["ComicSummary"];
    /** @description The canonical URL identifier for this resource. */
    resourceURI?: string;
    /** @description A resource list containing series in which this story appears. */
    series?: definitions["SeriesList"];
    /** @description The representative image for this story. */
    thumbnail?: definitions["Image"];
    /** @description The story title. */
    title?: string;
    /** @description The story type e.g. interior story, cover, text story. */
    type?: string;
  };
  StoryDataContainer: {
    /**
     * Format: int32
     * @description The total number of results returned by this call.
     */
    count?: number;
    /**
     * Format: int32
     * @description The requested result limit.
     */
    limit?: number;
    /**
     * Format: int32
     * @description The requested offset (number of skipped results) of the call.
     */
    offset?: number;
    /** @description The list of stories returned by the call */
    results?: definitions["Story"][];
    /**
     * Format: int32
     * @description The total number of resources available given the current filter set.
     */
    total?: number;
  };
  StoryDataWrapper: {
    /** @description An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
    attributionHTML?: string;
    /** @description The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
    attributionText?: string;
    /**
     * Format: int32
     * @description The HTTP status code of the returned result.
     */
    code?: number;
    /** @description The copyright notice for the returned result. */
    copyright?: string;
    /** @description The results returned by the call. */
    data?: definitions["StoryDataContainer"];
    /** @description A digest value of the content returned by the call. */
    etag?: string;
    /** @description A string description of the call status. */
    status?: string;
  };
  StoryList: {
    /**
     * Format: int32
     * @description The number of total available stories in this list. Will always be greater than or equal to the "returned" value.
     */
    available?: number;
    /** @description The path to the full list of stories in this collection. */
    collectionURI?: string;
    /** @description The list of returned stories in this collection. */
    items?: definitions["StorySummary"][];
    /**
     * Format: int32
     * @description The number of stories returned in this collection (up to 20).
     */
    returned?: number;
  };
  StorySummary: {
    /** @description The canonical name of the story. */
    name?: string;
    /** @description The path to the individual story resource. */
    resourceURI?: string;
    /** @description The type of the story (interior or cover). */
    type?: string;
  };
  TextObject: {
    /** @description The IETF language tag denoting the language the text object is written in. */
    language?: string;
    /** @description The text. */
    text?: string;
    /** @description The canonical type of the text object (e.g. solicit text, preview text, etc.). */
    type?: string;
  };
  Url: {
    /** @description A text identifier for the URL. */
    type?: string;
    /** @description A full URL (including scheme, domain, and path). */
    url?: string;
  };
}

export interface operations {
  /** Fetches lists of comic creators whose work appears in a specific story, with optional filters. See notes on individual parameters below. */
  getCreatorCollection: {
    parameters: {
      path: {
        /** The story ID. */
        storyId: number;
      };
      query: {
        /** Filter by creator first name (e.g. brian). */
        firstName?: string;
        /** Filter by creator middle name (e.g. Michael). */
        middleName?: string;
        /** Filter by creator last name (e.g. Bendis). */
        lastName?: string;
        /** Filter by suffix or honorific (e.g. Jr., Sr.). */
        suffix?: string;
        /** Filter by creator names that match critera (e.g. B, St L). */
        nameStartsWith?: string;
        /** Filter by creator first names that match critera (e.g. B, St L). */
        firstNameStartsWith?: string;
        /** Filter by creator middle names that match critera (e.g. Mi). */
        middleNameStartsWith?: string;
        /** Filter by creator last names that match critera (e.g. Ben). */
        lastNameStartsWith?: string;
        /** Return only creators which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only creators who worked on the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["CreatorDataWrapper"];
      };
    };
  };
  /** This method fetches a single character resource.  It is the canonical URI for any character resource provided by the API. */
  getCharacterIndividual: {
    parameters: {
      path: {
        /** A single character id. */
        characterId: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["CharacterDataWrapper"];
      };
    };
  };
  /** Fetches lists of comics containing a specific character, with optional filters. See notes on individual parameters below. */
  getComicsCharacterCollection: {
    parameters: {
      path: {
        /** The character id. */
        characterId: number;
      };
      query: {
        /** Filter by the issue format (e.g. comic, digital comic, hardcover). */
        format?: string;
        /** Filter by the issue format type (comic or collection). */
        formatType?: string;
        /** Exclude variant comics from the result set. */
        noVariants?: boolean;
        /** Return comics within a predefined date range. */
        dateDescriptor?: string;
        /** Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. */
        dateRange?: number[];
        /** Return only issues in series whose title matches the input. */
        title?: string;
        /** Return only issues in series whose title starts with the input. */
        titleStartsWith?: string;
        /** Return only issues in series whose start year matches the input. */
        startYear?: number;
        /** Return only issues in series whose issue number matches the input. */
        issueNumber?: number;
        /** Filter by diamond code. */
        diamondCode?: string;
        /** Filter by digital comic id. */
        digitalId?: number;
        /** Filter by UPC. */
        upc?: string;
        /** Filter by ISBN. */
        isbn?: string;
        /** Filter by EAN. */
        ean?: string;
        /** Filter by ISSN. */
        issn?: string;
        /** Include only results which are available digitally. */
        hasDigitalIssue?: boolean;
        /** Return only comics which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Return only comics which are part of the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only comics which take place in the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Return only comics which contain the specified stories (accepts a comma-separated list of ids). */
        stories?: number[];
        /** Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). */
        sharedAppearances?: number[];
        /** Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). */
        collaborators?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["ComicDataWrapper"];
      };
    };
  };
  /** Fetches lists of events in which a specific character appears, with optional filters. See notes on individual parameters below. */
  getCharacterEventsCollection: {
    parameters: {
      path: {
        /** The character ID. */
        characterId: number;
      };
      query: {
        /** Filter the event list by name. */
        name?: string;
        /** Return events with names that begin with the specified string (e.g. Sp). */
        nameStartsWith?: string;
        /** Return only events which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only events which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Return only events which are part of the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only events which take place in the specified comics (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only events which contain the specified stories (accepts a comma-separated list of ids). */
        stories?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["EventDataWrapper"];
      };
    };
  };
  /** Fetches lists of comic series in which a specific character appears, with optional filters. See notes on individual parameters below. */
  getCharacterSeriesCollection: {
    parameters: {
      path: {
        /** The character ID */
        characterId: number;
      };
      query: {
        /** Filter by series title. */
        title?: string;
        /** Return series with titles that begin with the specified string (e.g. Sp). */
        titleStartsWith?: string;
        /** Return only series matching the specified start year. */
        startYear?: number;
        /** Return only series which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only series which contain the specified comics (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only series which contain the specified stories (accepts a comma-separated list of ids). */
        stories?: number[];
        /** Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Return only series which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Filter the series by publication frequency type. */
        seriesType?: string;
        /** Return only series containing one or more comics with the specified format. */
        contains?: string[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["SeriesDataWrapper"];
      };
    };
  };
  /** Fetches lists of comic stories  featuring a specific character with optional filters. See notes on individual parameters below. */
  getCharacterStoryCollection: {
    parameters: {
      path: {
        /** The character ID. */
        characterId: number;
      };
      query: {
        /** Return only stories which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only stories contained in the specified (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only stories contained the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only stories which take place during the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["StoryDataWrapper"];
      };
    };
  };
  /** Fetches lists of comics in which a specific story appears, with optional filters. See notes on individual parameters below. */
  getComicsCollection: {
    parameters: {
      path: {
        /** The story ID. */
        storyId: number;
      };
      query: {
        /** Filter by the issue format (e.g. comic, digital comic, hardcover). */
        format?: string;
        /** Filter by the issue format type (comic or collection). */
        formatType?: string;
        /** Exclude variant comics from the result set. */
        noVariants?: boolean[];
        /** Return comics within a predefined date range. */
        dateDescriptor?: string[];
        /** Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. */
        dateRange?: number[];
        /** Return only issues in series whose title matches the input. */
        title?: string;
        /** Return only issues in series whose title starts with the input. */
        titleStartsWith?: string;
        /** Return only issues in series whose start year matches the input. */
        startYear?: number;
        /** Return only issues in series whose issue number matches the input. */
        issueNumber?: number;
        /** Filter by diamond code. */
        diamondCode?: string;
        /** Filter by digital comic id. */
        digitalId?: number;
        /** Filter by UPC. */
        upc?: string;
        /** Filter by ISBN. */
        isbn?: string;
        /** Filter by EAN. */
        ean?: string;
        /** Filter by ISSN. */
        issn?: string;
        /** Include only results which are available digitally. */
        hasDigitalIssue?: boolean[];
        /** Return only comics which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Return only comics which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Return only comics which are part of the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only comics which take place in the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). */
        sharedAppearances?: number[];
        /** Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). */
        collaborators?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["ComicDataWrapper"];
      };
    };
  };
  /** This method fetches a single comic resource.  It is the canonical URI for any comic resource provided by the API. */
  getComicIndividual: {
    parameters: {
      path: {
        /** A single comic. */
        comicId: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["ComicDataWrapper"];
      };
    };
  };
  /** Fetches lists of characters which appear in a specific comic with optional filters. See notes on individual parameters below. */
  getComicCharacterCollection: {
    parameters: {
      path: {
        /** The comic id. */
        comicId: number;
      };
      query: {
        /** Return only characters matching the specified full character name (e.g. Spider-Man). */
        name?: string;
        /** Return characters with names that begin with the specified string (e.g. Sp). */
        nameStartsWith?: string;
        /** Return only characters which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only characters which appear the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Return only characters which appear the specified stories (accepts a comma-separated list of ids). */
        stories?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["CharacterDataWrapper"];
      };
    };
  };
  /** Fetches lists of events in which a specific comic appears, with optional filters. See notes on individual parameters below. */
  getIssueEventsCollection: {
    parameters: {
      path: {
        /** The comic ID. */
        comicId: number;
      };
      query: {
        /** Filter the event list by name. */
        name?: string;
        /** Return events with names that begin with the specified string (e.g. Sp). */
        nameStartsWith?: string;
        /** Return only events which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only events which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Return only events which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Return only events which are part of the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only events which contain the specified stories (accepts a comma-separated list of ids). */
        stories?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["EventDataWrapper"];
      };
    };
  };
  /** Fetches lists of comic stories in a specific comic issue, with optional filters. See notes on individual parameters below. */
  getComicStoryCollection: {
    parameters: {
      path: {
        /** The comic ID. */
        comicId: number;
      };
      query: {
        /** Return only stories which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only stories contained the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only stories which take place during the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Return only stories which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["StoryDataWrapper"];
      };
    };
  };
  /** This method fetches a single creator resource.  It is the canonical URI for any creator resource provided by the API. */
  getCreatorIndividual: {
    parameters: {
      path: {
        /** A single creator id. */
        creatorId: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["CreatorDataWrapper"];
      };
    };
  };
  /** Fetches lists of events featuring the work of a specific creator with optional filters. See notes on individual parameters below. */
  getCreatorEventsCollection: {
    parameters: {
      path: {
        /** The creator ID. */
        creatorId: number;
      };
      query: {
        /** Filter the event list by name. */
        name?: string;
        /** Return events with names that begin with the specified string (e.g. Sp). */
        nameStartsWith?: string;
        /** Return only events which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only events which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Return only events which are part of the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only events which take place in the specified comics (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only events which contain the specified stories (accepts a comma-separated list of ids). */
        stories?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["EventDataWrapper"];
      };
    };
  };
  /** Fetches lists of comic series in which a specific creator's work appears, with optional filters. See notes on individual parameters below. */
  getCreatorSeriesCollection: {
    parameters: {
      path: {
        /** The creator ID. */
        creatorId: number;
      };
      query: {
        /** Filter by series title. */
        title?: string;
        /** Return series with titles that begin with the specified string (e.g. Sp). */
        titleStartsWith?: string;
        /** Return only series matching the specified start year. */
        startYear?: number;
        /** Return only series which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only series which contain the specified comics (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only series which contain the specified stories (accepts a comma-separated list of ids). */
        stories?: number[];
        /** Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Return only series which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Filter the series by publication frequency type. */
        seriesType?: string;
        /** Return only series containing one or more comics with the specified format. */
        contains?: string[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["SeriesDataWrapper"];
      };
    };
  };
  /** Fetches lists of comic stories by a specific creator with optional filters. See notes on individual parameters below. */
  getCreatorStoryCollection: {
    parameters: {
      path: {
        /** The ID of the creator. */
        creatorId: number;
      };
      query: {
        /** Return only stories which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only stories contained in the specified comics (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only stories contained the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only stories which take place during the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Return only stories which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["StoryDataWrapper"];
      };
    };
  };
  /** Fetches lists of events in which a specific story appears, with optional filters. See notes on individual parameters below. */
  getEventsCollection: {
    parameters: {
      path: {
        /** The story ID. */
        storyId: number;
      };
      query: {
        /** Filter the event list by name. */
        name?: string;
        /** Return events with names that begin with the specified string (e.g. Sp). */
        nameStartsWith?: string;
        /** Return only events which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only events which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Return only events which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Return only events which are part of the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only events which take place in the specified comics (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["EventDataWrapper"];
      };
    };
  };
  /** This method fetches a single event resource.  It is the canonical URI for any event resource provided by the API. */
  getEventIndividual: {
    parameters: {
      path: {
        /** A single event. */
        eventId: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["EventDataWrapper"];
      };
    };
  };
  /** Fetches lists of characters which appear in a specific event, with optional filters. See notes on individual parameters below. */
  getEventCharacterCollection: {
    parameters: {
      path: {
        /** The event ID */
        eventId: number;
      };
      query: {
        /** Return only characters matching the specified full character name (e.g. Spider-Man). */
        name?: string;
        /** Return characters with names that begin with the specified string (e.g. Sp). */
        nameStartsWith?: string;
        /** Return only characters which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only characters which appear in the specified comics (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only characters which appear the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only characters which appear the specified stories (accepts a comma-separated list of ids). */
        stories?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["CharacterDataWrapper"];
      };
    };
  };
  /** Fetches lists of comic series in which a specific event takes place, with optional filters. See notes on individual parameters below. */
  getEventSeriesCollection: {
    parameters: {
      path: {
        /** The event ID. */
        eventId: number;
      };
      query: {
        /** Filter by series title. */
        title?: string;
        /** Return series with titles that begin with the specified string (e.g. Sp). */
        titleStartsWith?: string;
        /** Return only series matching the specified start year. */
        startYear?: number;
        /** Return only series which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only series which contain the specified comics (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only series which contain the specified stories (accepts a comma-separated list of ids). */
        stories?: number[];
        /** Return only series which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Return only series which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Filter the series by publication frequency type. */
        seriesType?: string;
        /** Return only series containing one or more comics with the specified format. */
        contains?: string[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["SeriesDataWrapper"];
      };
    };
  };
  /** Fetches lists of comic stories from a specific event, with optional filters. See notes on individual parameters below. */
  getEventStoryCollection: {
    parameters: {
      path: {
        /** The ID of the event. */
        eventId: number;
      };
      query: {
        /** Return only stories which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only stories contained in the specified (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only stories contained the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Return only stories which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["StoryDataWrapper"];
      };
    };
  };
  /** Fetches lists of comic series with optional filters. See notes on individual parameters below. */
  getSeriesCollection: {
    parameters: {
      query: {
        /** Return only series matching the specified title. */
        title?: string;
        /** Return series with titles that begin with the specified string (e.g. Sp). */
        titleStartsWith?: string;
        /** Return only series matching the specified start year. */
        startYear?: number;
        /** Return only series which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only series which contain the specified comics (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only series which contain the specified stories (accepts a comma-separated list of ids). */
        stories?: number[];
        /** Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Return only series which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Return only series which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Filter the series by publication frequency type. */
        seriesType?: string;
        /** Return only series containing one or more comics with the specified format. */
        contains?: string[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["SeriesDataWrapper"];
      };
    };
  };
  /** This method fetches a single comic series resource.  It is the canonical URI for any comic series resource provided by the API. */
  getSeriesIndividual: {
    parameters: {
      path: {
        /** Filter by series title. */
        seriesId: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["SeriesDataWrapper"];
      };
    };
  };
  /** Fetches lists of characters which appear in specific series, with optional filters. See notes on individual parameters below. */
  getSeriesCharacterWrapper: {
    parameters: {
      path: {
        /** The series id. */
        seriesId: number;
      };
      query: {
        /** Return only characters matching the specified full character name (e.g. Spider-Man). */
        name?: string;
        /** Return characters with names that begin with the specified string (e.g. Sp). */
        nameStartsWith?: string;
        /** Return only characters which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only characters which appear in the specified comics (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Return only characters which appear the specified stories (accepts a comma-separated list of ids). */
        stories?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["CharacterDataWrapper"];
      };
    };
  };
  /** Fetches lists of comic stories from a specific series with optional filters. See notes on individual parameters below. */
  getSeriesStoryCollection: {
    parameters: {
      path: {
        /** The series ID. */
        seriesId: number;
      };
      query: {
        /** Return only stories which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only stories contained in the specified (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only stories which take place during the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Return only stories which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["StoryDataWrapper"];
      };
    };
  };
  /** Fetches lists of comic stories with optional filters. See notes on individual parameters below. */
  getStoryCollection: {
    parameters: {
      query: {
        /** Return only stories which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only stories contained in the specified (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only stories contained the specified series (accepts a comma-separated list of ids). */
        series?: number[];
        /** Return only stories which take place during the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Return only stories which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["StoryDataWrapper"];
      };
    };
  };
  /** This method fetches a single comic story resource.  It is the canonical URI for any comic story resource provided by the API. */
  getStoryIndividual: {
    parameters: {
      path: {
        /** Filter by story id. */
        storyId: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["StoryDataWrapper"];
      };
    };
  };
  /** Fetches lists of comic series in which the specified story takes place. See notes on individual parameters below. */
  getStorySeriesCollection: {
    parameters: {
      path: {
        /** The story ID. */
        storyId: number;
      };
      query: {
        /** Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). */
        events?: number[];
        /** Filter by series title. */
        title?: string;
        /** Return series with titles that begin with the specified string (e.g. Sp). */
        titleStartsWith?: string;
        /** Return only series matching the specified start year. */
        startYear?: number;
        /** Return only series which have been modified since the specified date. */
        modifiedSince?: string;
        /** Return only series which contain the specified comics (accepts a comma-separated list of ids). */
        comics?: number[];
        /** Return only series which feature work by the specified creators (accepts a comma-separated list of ids). */
        creators?: number[];
        /** Return only series which feature the specified characters (accepts a comma-separated list of ids). */
        characters?: number[];
        /** Filter the series by publication frequency type. */
        seriesType?: string;
        /** Return only series containing one or more comics with the specified format. */
        contains?: string[];
        /** Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
        orderBy?: string[];
        /** Limit the result set to the specified number of resources. */
        limit?: number;
        /** Skip the specified number of resources in the result set. */
        offset?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["SeriesDataWrapper"];
      };
    };
  };
}

export interface external {}
